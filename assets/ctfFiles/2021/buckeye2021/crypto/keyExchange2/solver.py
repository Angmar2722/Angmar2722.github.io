

# This file was *autogenerated* from the file solver.sage
from sage.all_cmdline import *   # import sage library

_sage_const_13386 = Integer(13386); _sage_const_1 = Integer(1); _sage_const_4 = Integer(4); _sage_const_0 = Integer(0); _sage_const_5 = Integer(5); _sage_const_16 = Integer(16)
from pwn import *
from Crypto.Util.number import *
from Crypto.Cipher import AES


while True:
    debug = False
    r = remote("crypto.chall.pwnoh.io", _sage_const_13386 , level = 'debug' if debug else None)

    r.recvuntil('p = ')
    p = int(r.recvline())
    assert isPrime(p)

    if ((p-_sage_const_1 ) % _sage_const_4  != _sage_const_0 ):
        continue

    g = _sage_const_5 
    B = Mod(Mod(_sage_const_1 , p).sqrt(all=True)[_sage_const_1 ], p).sqrt(all=True)[_sage_const_1 ]
    print(f"B is {B}")

    try:
        r.sendlineafter('Give me your public key B: ', str(B))
        r.recvuntil('ciphertext = ')
        ct = r.recvline(keepends=False).decode()
    except EOFError:
        continue
    
    for a in range(_sage_const_4 ):

        key = hashlib.sha1(long_to_bytes(pow(B, a, p))).digest()[:_sage_const_16 ]
        cipher = AES.new(key, AES.MODE_ECB)

        try:
            possibleFlag = cipher.decrypt(bytes.fromhex(ct))
            if b'buckeye{' in possibleFlag:
                print(possibleFlag)
                exit()
        except Exception:
            print("Error encountered :(")
            pass

