from Crypto.Util.number import *
from tqdm import tqdm
import cysignals

N = 198148795890507031730221728469492521085435050254010422245429012501864312776356522213014006175424179860455397661479243825590470750385249479224738397071326661046694312629376866307803789411244554424360122317688081850938387121934893846964467922503328604784935624075688440234885261073350247892064806120096887751
a, b, m = 1677936292368545917814039483235622978551357499172411081065325777729488793550136568309923513362117687939170753313352485633354858207097035878077942534451467, 5687468800624594128838903842767411040727750916115472185196475570099217560998907467291416768835644005325105434981167565207313702286530912332233402467314947, 1244793456976456877170839265783035368354692819005211513409129011314633866460250237897970818451591728769403864292158494516440464466254909969383897236264921
ct = 48071438195829770851852911364054237976158406255022684617769223046035836237425012457131162001786019505606941050117178190535720928339364199078329207393922570246678871062386142183424414041935978305046280399687623437942986302690599232729065536417757505209285175593543234585659130582659013242346666628394528555
e = 65537

def getFlag(p):
    q = N // p
    d = inverse(e, (q- 1) * (p - 1))
    print(long_to_bytes(pow(ct, d, N)))
    exit()

for k in tqdm(range(1, 10000)):

    M = Integers(m)

    A = M(a ^ k)
    B = M(((a^k - 1) // (a - 1))*b) 

    try:
        deltaSqrt1, deltaSqrt2 = Mod((B^2) + 4*A*N, m).sqrt(all=True)
        p1 = int((-B + deltaSqrt1) * inverse_mod(int(2*A), m)) 
        p2 = int((-B + deltaSqrt2) * inverse_mod(int(2*A), m)) 
    except TypeError:
        #print("Type error")
        continue
    except NotImplementedError:
        #print("Not implemented hello")
        continue
    except cysignals.signals.SignalError:
        continue

    if N % p1 == 0:
        getFlag(p1)
    elif N % p2 == 0:
        getFlag(p2)

else:
    print("k not found :( ")

#b'hitcon{so_weak_randomnessssss}\n'
